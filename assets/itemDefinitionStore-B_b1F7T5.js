import{Q as n,H as t}from"./index-DmVvMhTu.js";const r=n("itemDefinition",{state:()=>({itemDefinitions:[],loading:!1,error:null}),actions:{async fetchItemDefinitions(){this.loading=!0,this.error=null;try{const e=await t.get("/itemDefinitions");this.itemDefinitions=e.data.sort((i,s)=>s.id-i.id)}catch(e){this.error="Failed to fetch item definitions: "+(e.response?.data?.message||e.message),console.error(e)}finally{this.loading=!1}},async addItemDefinition(e){this.loading=!0,this.error=null;try{const i=await t.post("/itemDefinitions",e);return this.itemDefinitions.unshift(i.data),i.data}catch(i){throw this.error="Failed to add item definition: "+(i.response?.data?.message||i.message),console.error(i),i}finally{this.loading=!1}},async updateItemDefinition(e){this.loading=!0,this.error=null;try{await t.put(`/itemDefinitions/${e.id}`,e),await this.fetchItemDefinitions()}catch(i){throw this.error="Failed to update item definition: "+(i.response?.data?.message||i.message),console.error(i),i}finally{this.loading=!1}},async deleteItemDefinition(e){this.loading=!0,this.error=null;try{await t.delete(`/itemDefinitions/${e}`),this.itemDefinitions=this.itemDefinitions.filter(i=>i.id!==e)}catch(i){throw this.error="Failed to delete item definition: "+(i.response?.data?.message||i.message),console.error(i),i}finally{this.loading=!1}}}});export{r as u};
